{"version":3,"sources":["Base/Item.tsx","Base/List.tsx","Modal/Modal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Item","Props","className","firstName","lastName","phone","src","avatarUrl","alt","width","height","onClick","changeModalState","List","data","map","index","id","Modal","modalData","useForm","register","handleSubmit","graphQLClient","GraphQLClient","ADD_CLIENT_MUTATION","gql","EDIT_CLIENT_MUTATION","modalState","isOpen","onSubmit","client","console","log","request","name","type","ref","defaultValue","App","useQuery","a","getClients","status","useState","setModalState","setModalData","newState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","queryClient","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","document","getElementById"],"mappings":"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","file":"static/js/main.92a19012.chunk.js","sourcesContent":["export default function Item(Props: any) {\n  return (\n    <tr>\n      <td className=\"border px-8 py-4\">{Props.firstName}</td>\n      <td className=\"border px-8 py-4\">{Props.lastName}</td>\n      <td className=\"border px-8 py-4\">{Props.phone}</td>\n      <td className=\"border px-8 py-4\">\n        <img src={Props.avatarUrl} alt=\"\" width=\"80\" height=\"80\" />\n      </td>\n      <td className=\"border px-8 py-4\">\n        <button\n          className=\"bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-green-500 hover:border-transparent rounded\"\n          onClick={() => Props.changeModalState(Props)}\n        >\n          Edit\n        </button>\n      </td>\n    </tr>\n  );\n}\n","import Item from \"./Item\";\nimport IClient from \"../interface\";\n\nexport default function List(Props: any) {\n  let data: IClient[] = Props.data;\n\n  return (\n    <table className=\"shadow-lg bg-white\">\n      <thead>\n        <tr>\n          <th className=\"bg-blue-100 border text-left px-8 py-4\">First Name</th>\n          <th className=\"bg-blue-100 border text-left px-8 py-4\">Last Name</th>\n          <th className=\"bg-blue-100 border text-left px-8 py-4\">Phone</th>\n          <th className=\"bg-blue-100 border text-left px-8 py-4\">Avatar</th>\n          <th className=\"bg-green-100 border text-left px-8 py-4\">Editing</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((data: IClient, index: number) => {\n          return (\n            <Item\n              key={index}\n              id={data.id}\n              firstName={data.firstName}\n              lastName={data.lastName}\n              phone={data.phone}\n              avatarUrl={data.avatarUrl}\n              changeModalState={Props.changeModalState}\n            ></Item>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n","import \"./Modal.css\";\nimport { Fragment } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport IClient from \"../interface\";\nimport { gql, GraphQLClient } from \"graphql-request\";\n\ntype Inputs = {\n  register: string;\n  handleSubmit: string;\n};\n\nexport default function Modal(Props: any) {\n  let data = Props.modalData;\n  const { register, handleSubmit } = useForm<Inputs>();\n  const endpoint = \"https://test-task.expane.pro/api/graphql\";\n\n  const graphQLClient = new GraphQLClient(endpoint);\n  const ADD_CLIENT_MUTATION = gql`\n    mutation AddClient(\n      $firstName: String!\n      $lastName: String!\n      $phone: String!\n      $avatarUrl: String!\n    ) {\n      addClient(\n        firstName: $firstName\n        lastName: $lastName\n        phone: $phone\n        avatarUrl: $avatarUrl\n      ) {\n        id\n      }\n    }\n  `;\n  const EDIT_CLIENT_MUTATION = gql`\n    mutation UpdateClient(\n      $id: ID!\n      $firstName: String!\n      $lastName: String!\n      $phone: String!\n      $avatarUrl: String!\n    ) {\n      updateClient(\n        id: $id\n        firstName: $firstName\n        lastName: $lastName\n        phone: $phone\n        avatarUrl: $avatarUrl\n      ) {\n        id\n      }\n    }\n  `;\n\n  const onSubmit = (client: IClient) => {\n    if (data.id) {\n      console.log(\"Edit\");\n      graphQLClient.request(EDIT_CLIENT_MUTATION, { ...client, id: data.id });\n    } else {\n      console.log(\"ADD\");\n      graphQLClient.request(ADD_CLIENT_MUTATION, client);\n    }\n    Props.changeModalState(client);\n  };\n\n  return (\n    <Fragment>\n      <button\n        className=\"addButton bg-green-500 hover:bg-blue-700 text-white font-bold py-2 px-4 border border-blue-700 rounded\"\n        onClick={Props.changeModalState}\n      >\n        Add new client\n      </button>\n\n      {Props.modalState.isOpen && (\n        <div className=\"modal\">\n          <div className=\"modal-body\">\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <p>\n                First Name:{\" \"}\n                <input\n                  name=\"firstName\"\n                  type=\"text\"\n                  ref={register}\n                  defaultValue={data.firstName}\n                />\n              </p>\n              <p>\n                Last Name:{\" \"}\n                <input\n                  name=\"lastName\"\n                  type=\"text\"\n                  ref={register}\n                  defaultValue={data.lastName}\n                />\n              </p>\n              <p>\n                Phone:{\" \"}\n                <input\n                  name=\"phone\"\n                  type=\"number\"\n                  ref={register}\n                  defaultValue={data.phone}\n                />\n              </p>\n              <p>\n                Avatar:{\" \"}\n                <textarea\n                  name=\"avatarUrl\"\n                  ref={register}\n                  defaultValue={data.avatarUrl}\n                />\n              </p>\n              <div className=\"buttonPanel\">\n                <input\n                  type=\"submit\"\n                  className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-green-500 rounded\"\n                />\n                <button\n                  className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-red-500 rounded\"\n                  onClick={Props.changeModalState}\n                >\n                  Cancel\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </Fragment>\n  );\n}\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport List from \"./Base/List\";\nimport Modal from \"./Modal/Modal\";\nimport { useQuery } from \"react-query\";\nimport { request, gql } from \"graphql-request\";\n\nconst endpoint = \"https://test-task.expane.pro/api/graphql\";\n\nfunction App() {\n  const { status, data } = useQuery(\"clients\", async () => {\n    const data = (\n      await request(\n        endpoint,\n        gql`\n          {\n            getClients {\n              id\n              firstName\n              lastName\n              phone\n              avatarUrl\n            }\n          }\n        `\n      )\n    ).getClients;\n    return data;\n  });\n\n  const [modalState, setModalState] = useState({ isOpen: false });\n  const [modalData, setModalData] = useState([]);\n\n  function changeModalState(data: any) {\n    setModalData(data);\n    const newState = !modalState.isOpen;\n    setModalState({ isOpen: newState });\n  }\n\n  return (\n    <div>\n      {status === \"loading\" ? (\n        \"Loading...\"\n      ) : (\n        <>\n          <div className=\"main\">\n            <h1 className=\"header\">Client base</h1>\n            <Modal\n              data={data}\n              changeModalState={changeModalState}\n              modalState={modalState}\n              modalData={modalData}\n            ></Modal>\n            <List\n              data={data}\n              changeModalState={changeModalState}\n              modalState={modalState}\n            ></List>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}